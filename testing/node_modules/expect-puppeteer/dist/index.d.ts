import { Page, Frame, ElementHandle, FrameWaitForFunctionOptions, ClickOptions, Dialog } from 'puppeteer';
import { JestExpect } from '@jest/expect';

type PuppeteerInstance = Page | Frame | ElementHandle;
type Selector = {
    type: "css" | "xpath";
    value: string;
};
type SearchExpression = RegExp | string | undefined;

type Options = FrameWaitForFunctionOptions;
declare const setDefaultOptions: (options: Options) => void;
declare const getDefaultOptions: () => Options;

type MatchTextContentOptions = Options & {
    traverseShadowRoots?: boolean;
};

type NotToMatchOptions = MatchTextContentOptions;
declare function notToMatchTextContent(instance: PuppeteerInstance, matcher: SearchExpression, options?: NotToMatchOptions): Promise<void>;

type GetElementOptions = {
    text?: string | RegExp;
    visible?: boolean;
};

type NotToMatchElementOptions = GetElementOptions & Options;
declare function notToMatchElement(instance: PuppeteerInstance, selector: Selector | string, options?: NotToMatchElementOptions): Promise<void>;

type ToMatchElementOptions = GetElementOptions & Options;
declare function toMatchElement(instance: PuppeteerInstance, selector: Selector | string, options?: ToMatchElementOptions): Promise<ElementHandle<Element>>;

type ToClickOptions = ToMatchElementOptions & ClickOptions;
declare function toClick(instance: PuppeteerInstance, selector: Selector | string, options?: ToClickOptions): Promise<void>;

declare function toDisplayDialog(page: Page, block: () => Promise<void>): Promise<Dialog>;

type ToFillOptions = ToMatchElementOptions & {
    delay?: number;
};
declare function toFill(instance: PuppeteerInstance, selector: Selector | string, value: string, options?: ToFillOptions): Promise<void>;

type ToFillFormOptions = ToFillOptions & ToMatchElementOptions;
declare function toFillForm(instance: PuppeteerInstance, selector: Selector | string, values: Record<string, string>, options?: ToFillFormOptions): Promise<void>;

type ToMatchOptions = MatchTextContentOptions;
declare function toMatchTextContent(instance: PuppeteerInstance, matcher: SearchExpression, options?: ToMatchOptions): Promise<void>;

declare function toSelect(instance: PuppeteerInstance, selector: Selector | string, valueOrText: string, options?: ToMatchElementOptions): Promise<void>;

declare function toUploadFile(instance: PuppeteerInstance, selector: Selector | string, filePaths: string | string[], options?: ToMatchElementOptions): Promise<void>;

type Matcher<TPage extends PuppeteerInstance, TResult = any> = (page: TPage, ...args: any[]) => Promise<TResult>;
interface MatcherSet<TPage extends PuppeteerInstance> {
    positive: Record<string, Matcher<TPage>>;
    negative: Record<string, Matcher<TPage>>;
}
declare const frameMatchers: {
    positive: {
        toClick: typeof toClick;
        toFill: typeof toFill;
        toFillForm: typeof toFillForm;
        toMatchTextContent: typeof toMatchTextContent;
        toMatchElement: typeof toMatchElement;
        toSelect: typeof toSelect;
        toUploadFile: typeof toUploadFile;
    };
    negative: {
        toMatchTextContent: typeof notToMatchTextContent;
        toMatchElement: typeof notToMatchElement;
    };
};
type FrameMatchers = typeof frameMatchers;
declare const pageMatchers: {
    positive: {
        toClick: typeof toClick;
        toDisplayDialog: typeof toDisplayDialog;
        toFill: typeof toFill;
        toFillForm: typeof toFillForm;
        toMatchTextContent: typeof toMatchTextContent;
        toMatchElement: typeof toMatchElement;
        toSelect: typeof toSelect;
        toUploadFile: typeof toUploadFile;
    };
    negative: {
        toMatchTextContent: typeof notToMatchTextContent;
        toMatchElement: typeof notToMatchElement;
    };
};
type PageMatchers = typeof pageMatchers;
declare const elementHandleMatchers: {
    positive: {
        toClick: typeof toClick;
        toFill: typeof toFill;
        toFillForm: typeof toFillForm;
        toMatchTextContent: typeof toMatchTextContent;
        toMatchElement: typeof toMatchElement;
        toSelect: typeof toSelect;
        toUploadFile: typeof toUploadFile;
    };
    negative: {
        toMatchTextContent: typeof notToMatchTextContent;
        toMatchElement: typeof notToMatchElement;
    };
};
type ElementHandleMatchers = typeof elementHandleMatchers;
type MatchersFromSet<TSet extends MatcherSet<any>> = TSet["positive"] & {
    not: TSet["negative"];
};
type PuppeteerMatchers = MatchersFromSet<FrameMatchers> | MatchersFromSet<PageMatchers> | MatchersFromSet<ElementHandleMatchers>;
declare const expectPuppeteer: JestExpect;

type MatcherType<T> = T extends (instance: any, ...args: infer TArgs) => infer TRet ? (...args: TArgs) => TRet : never;
declare global {
    namespace jest {
        interface Matchers<R> {
            toClick: MatcherType<typeof toClick>;
            toFill: MatcherType<typeof toFill>;
            toFillForm: MatcherType<typeof toFillForm>;
            toMatchTextContent: MatcherType<typeof toMatchTextContent>;
            toMatchElement: MatcherType<typeof toMatchElement>;
            toSelect: MatcherType<typeof toSelect>;
            toUploadFile: MatcherType<typeof toUploadFile>;
            toDisplayDialog: MatcherType<typeof toDisplayDialog>;
        }
    }
}

export { type Matcher, type MatcherSet, type PuppeteerMatchers, expectPuppeteer as expect, getDefaultOptions, setDefaultOptions };
